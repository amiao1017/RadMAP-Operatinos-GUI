import datetime
import time

import numpy
import glob
import sys
import time
import os
from nrlGammaHackV2 import madc_data
from acquire_client import madc_control
#from raw_data_utils_vme import convert
from multiprocessing import Queue, Manager, Array, Value 

threadFlag = False

adcThreshholds3 = \
	    [[4,
	      [0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0]],
	     [0,
	      [0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0]],
	     [0,
	      [0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0]],
	     [0,
	      [0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0]],
	     [0,
	      [0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0, \
	       0, 0, 0, 0, 0, 0, 0, 0]],
	     ]

adcThreshholds = [[4,
	   [60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60]],
	  [0,
	   [2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  17,  16,  15,  14,  15, \
	    14,  15,  14,  12,  11, 11,  15,  13,  12, 2047, 2047]],
	  [0,
	   [ 14,  20,  16,  22,  14,  21,  16, \
	     22,  35,  28,  22,  31,  22,  28, \
	    2047, 2047,  21,  16,  17,  14,  16, \
	     15,  15,  15,  11,  13, 20,  20,  12,  14, 2047, 2047]],
	  [0,
	   [ 17,  14,  17,  19,  19,  20,  17, \
	     20,  25,  28,  24,  27,  23,  27, \
	     35, 2047,  17,  15,  15,  14,  16, \
	     13,  15,  15,  20,  11,  10,  10,  15,  20, 2047, 2047]],
	  [0,
	   [ 17, 2047,  25,  30,  20,  20,  22, \
	     21,  25,  27,  24,  27,  28,  28, \
	     25, 2047,  16,  18,  16,  13,  15, \
	     15,  15,  14,  11,  12,  20,  16,  12,  21,   9, 2047]]]

adcThreshholds1 = [[4,
	   [60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60, \
	    60, 60, 60, 60, 60, 60, 60, 60]],
	  [0,
	   [14, 14, 14, 14, 14, 14, 14, \
	    14, 14, 14, 14, 14, 14, 14, \
	    14, 2047,  17,  16,  15,  14,  15, \
	    14,  15,  14,  12,  11, 11,  10,  13,  12, 2047, 2047]],
	  [0,
	   [ 14,  14,  16,  22,  14,  21,  16, \
	     22,  25,  28,  22,  31,  22,  28, \
	    2047, 2047,  21,  16,  17,  14,  16, \
	     15,  15,  15,  11,  13, 10,  11,  12,  14, 2047, 2047]],
	  [0,
	   [ 17,  14,  17,  19,  19,  20,  17, \
	     20,  25,  28,  24,  27,  23,  27, \
	     25, 2047,  17,  15,  15,  14,  16, \
	     13,  15,  15,  10,  11,  10,  10,  10,  10, 2047, 2047]],
	  [0,
	   [ 17, 2047,  20,  20,  20,  20,  22, \
	     21,  25,  27,  24,  27,  28,  28, \
	     25, 2047,  16,  18,  16,  13,  15, \
	     15,  15,  14,  11,  12,  10,  11,  12,  11,   9, 2047]]]


adcThreshholds4 = [[4,
	   [2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [ 1, 1, 1, 1, 1, 1, 1, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [ 2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [ 2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]]]


adcThreshholds5 = [[4,
	   [2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [ 50, 50, 50, 50, 50, 50, 50, 50, \
	     50, 50, 50, 50, 50, 50, 50, 50, \
	     50, 50, 50, 50, 50, 50, 50, 50, \
	     50, 50, 50, 50, 50, 50, 50, 50]],
	  [0,
	   [ 2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]],
	  [0,
	   [ 2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047, 2047, 2047, 2047, 2047, 2047, \
	    2047, 2047,  2047,  2047,  2047,  2047,  2047, \
	    2047,  2047,  2047,  2047,  2047, 2047,  2047,  2047,  2047, 2047, 2047]]]
class acquire:
	def __init__(self, rootname=''):
		self.acqData = madc_data(
	        rootname= rootname,
	        file_time=60,
	        queue = Queue())
		print "madc_data initialized"
	    	
		self.acqControl = madc_control()
		print "madc_control initialized"
		for board, values in enumerate(adcThreshholds):
			self.acqControl.set_resolution(board, values[0])
			for channel, thresh in enumerate(values[1]):
				self.acqControl.set_threshold(board, channel, thresh)
				self.acqControl.set_trig_thresh(200)
		print "ADC Values Set"
		#path = os.environ['HOME']
		#path = path + "/Documents"
		#self.cnvt = convert(
		#self.acqData.getQueue(),Queue(),debugFlag=False)
		#self.cnvt.start_thread(threadFlag=threadFlag)
		#self.enableFlag= True
	#        time.sleep(10.)

	#        print '************pipeline here0'
	#        time.sleep(1.)

		self.acqControl.begin()
		#if ODEBUG: print 'acqData.queue:',self.acqData.getQueue().qsize()
		time1 = int(time.time())	
		#self.acqData.setHdrTime(time1)	#this is called but not in madc_data 								class. Like pipelineState	
		self.acqData.start_thread(threadFlag=threadFlag)
		print "Acquisition Started"
		time.sleep(300)
		self.acqData.stop()
		print "Acquisition Stopped"
		self.acqControl.end()
		print "Control Ended"
		self.acqControl.close()
		print "Control Closed"
		self.acqData.stop_thread()
		print "Data Thread Stopped"

		

if __name__ == "__main__":
	acq = acquire()


